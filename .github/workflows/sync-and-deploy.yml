name: Sync Upstream and Deploy JSX Template

on:
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

  schedule:
    - cron: '0 2 * * *'

  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/lint.yml'
      - '.github/workflows/tests.yml'

env:
  UPSTREAM_REPO: 'laravel/react-starter-kit'
  DEV_REPO: 'aliziodev/react-jsx-starter-kit-dev'
  TEMPLATE_REPO: 'aliziodev/react-jsx-starter-kit'

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
      commit_sha: ${{ steps.sync.outputs.commit_sha }}

    steps:
    - name: Checkout development repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
        git fetch upstream

    - name: Check for upstream changes
      id: check_changes
      run: |
        UPSTREAM_SHA=$(git rev-parse upstream/main)
        CURRENT_SHA=$(git rev-parse HEAD)

        echo "Upstream SHA: $UPSTREAM_SHA"
        echo "Current SHA: $CURRENT_SHA"

        if [ "$UPSTREAM_SHA" != "$CURRENT_SHA" ] || [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes detected or force sync requested"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No new changes from upstream"
        fi

    - name: Sync with upstream
      id: sync
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "üîÑ Syncing with upstream..."

        SYNC_BRANCH="sync-upstream-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $SYNC_BRANCH

        # Merge upstream tanpa commit otomatis
        git merge --no-commit --no-ff upstream/main || {
          echo "‚ùå Merge conflicts detected. Manual intervention required."
          git merge --abort
          exit 1
        }

        # Kembalikan workflows ke versi main (lokal) supaya tidak ikut tercatat
        git checkout main -- .github/workflows || true

        # Stage semua perubahan kecuali workflows
        git add .
        git reset HEAD -- .github/workflows || true

        # Commit hasil merge
        if git diff --cached --quiet; then
          echo "No changes to commit after excluding workflows"
        else
          git commit -m "Sync with upstream (workflows excluded)"
        fi

        # Push branch sync
        git push origin $SYNC_BRANCH

        # Merge ke main
        git checkout main
        git merge $SYNC_BRANCH --no-edit
        git push origin main

        # Cleanup branch sync
        git branch -d $SYNC_BRANCH
        git push origin --delete $SYNC_BRANCH

        COMMIT_SHA=$(git rev-parse HEAD)
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "‚úÖ Successfully synced with upstream (workflows excluded)"

  deploy-template:
    needs: sync-upstream
    if: needs.sync-upstream.outputs.has_changes == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout updated repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run JSX conversion
      run: |
        echo "üîÑ Converting TSX to JSX..."
        node scripts/run-conversion.js
        echo "‚úÖ Conversion completed"

    - name: Prepare template repository
      run: |
        echo "üì¶ Preparing template files..."
        
        # Create output directory
        mkdir -p output
        
        # Copy all files except specific directories and files
        rsync -av --progress . output/ \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='storage/logs' \
          --exclude='storage/framework/cache' \
          --exclude='storage/framework/sessions' \
          --exclude='storage/framework/views' \
          --exclude='bootstrap/cache' \
          --exclude='.env' \
          --exclude='output'
        
        # Remove only sync-and-deploy.yml from workflows
         rm -f output/.github/workflows/sync-and-deploy.yml
         
         # Copy template workflows if they exist
         if [ -d "templates/workflows" ]; then
           cp templates/workflows/* output/.github/workflows/
         fi
        
        echo "‚úÖ Template files prepared"

    - name: Deploy to template repository
      run: |
        echo "üöÄ Deploying to template repository..."
        
        cd output
        
        # Initialize git if not exists
        if [ ! -d ".git" ]; then
          git init
        fi
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add template repository as remote
        git remote add template https://x-access-token:${{ secrets.TEMPLATE_REPO_TOKEN }}@github.com/${{ env.TEMPLATE_REPO }}.git || true
        
        # Fetch template repository
        git fetch template || true
        
        # Create or switch to main branch
        git checkout -B main
        
        # Add all files
        git add .
        
        # Check if there are changes to commit
        if git diff --cached --quiet; then
          echo "‚ÑπÔ∏è No changes to deploy"
        else
          # Commit changes
          git commit -m "Auto-update template from dev repository
          
          Source commit: ${{ needs.sync-upstream.outputs.commit_sha }}
          Triggered by: ${{ github.event_name }}"
          
          # Push to template repository
          git push template main --force
          
          echo "‚úÖ Successfully deployed to template repository"
        fi
