name: Sync Upstream and Deploy JSX Template

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force sync even if no changes'
        required: false
        default: false
        type: boolean

  # Scheduled sync (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

  # Trigger on push to main (for development changes)
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/lint.yml'
      - '.github/workflows/tests.yml'

env:
  UPSTREAM_REPO: 'laravel/react-starter-kit'
  DEV_REPO: 'aliziodev/react-jsx-starter-kit-dev'
  TEMPLATE_REPO: 'aliziodev/react-jsx-starter-kit'

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
      commit_sha: ${{ steps.sync.outputs.commit_sha }}

    steps:
    - name: Checkout development repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
        git fetch upstream

    - name: Check for upstream changes
      id: check_changes
      run: |
        # Get latest commit from upstream main
        UPSTREAM_SHA=$(git rev-parse upstream/main)
        CURRENT_SHA=$(git rev-parse HEAD)

        echo "Upstream SHA: $UPSTREAM_SHA"
        echo "Current SHA: $CURRENT_SHA"

        # Check if there are new commits
        if [ "$UPSTREAM_SHA" != "$CURRENT_SHA" ] || [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Changes detected or force sync requested"
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è  No new changes from upstream"
        fi

    - name: Sync with upstream
      id: sync
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "üîÑ Syncing with upstream..."

        # Create a new branch for the sync
        SYNC_BRANCH="sync-upstream-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $SYNC_BRANCH

        # Merge upstream changes
        git merge upstream/main --no-edit || {
          echo "‚ùå Merge conflicts detected. Manual intervention required."
          git merge --abort
          exit 1
        }

        # Reset workflow files to avoid permission issues
        git reset HEAD -- .github/workflows/
        git checkout -- .github/workflows/

        # Add changes excluding workflows
        git add .
        git commit -m "Sync with upstream (excluding workflows)" || echo "No changes to commit"

        # Push the sync branch
        git push origin $SYNC_BRANCH

        # Merge to main
        git checkout main
        git merge $SYNC_BRANCH --no-edit
        git push origin main

        # Clean up sync branch
        git branch -d $SYNC_BRANCH
        git push origin --delete $SYNC_BRANCH

        COMMIT_SHA=$(git rev-parse HEAD)
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "‚úÖ Successfully synced with upstream (workflows excluded)"

  convert-jsx:
    runs-on: ubuntu-latest
    needs: sync-upstream
    if: needs.sync-upstream.outputs.has_changes == 'true' || github.event_name == 'push'
    outputs:
      conversion_success: ${{ steps.convert.outputs.success }}

    steps:
    - name: Checkout updated repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Update lock file if package.json has changed
        npm install
        # Use clean install for consistent builds
        npm ci

    - name: Run TypeScript to JSX conversion
      id: convert
      run: |
        echo "üöÄ Starting TypeScript to JSX conversion..."

        # Check if conversion script exists
        if [ ! -f "scripts/run-conversion.js" ]; then
          echo "‚ùå Conversion script not found: scripts/run-conversion.js"
          exit 1
        fi

        # Run the conversion
        node scripts/run-conversion.js

        echo "success=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Conversion completed successfully"

    - name: Verify conversion output
      run: |
        echo "üìä Verifying conversion output..."

        # Check if output directory exists
        if [ ! -d "output" ]; then
          echo "‚ùå Output directory not found"
          exit 1
        fi

        # Check essential files
        REQUIRED_FILES=(
          "output/resources/js/app.jsx"
          "output/resources/js/ssr.jsx"
          "output/vite.config.js"
          "output/resources/views/app.blade.php"
          "output/package.json"
        )

        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file not found: $file"
            exit 1
          fi
        done

        # Count converted files
        JSX_COUNT=$(find output/resources/js -name "*.jsx" -o -name "*.js" | wc -l)
        echo "üìÅ Found $JSX_COUNT JavaScript/JSX files in output"

        if [ $JSX_COUNT -lt 50 ]; then
          echo "‚ö†Ô∏è  Warning: Low number of converted files ($JSX_COUNT)"
        fi

        echo "‚úÖ Conversion output verified successfully"

    - name: Debug output directory before upload
      run: |
        echo "üìã Listing output directory contents:"
        ls -la output/
        echo "üìã Checking for hidden files:"
        find output/ -name ".*" -type f
        echo "üìã Total file count:"
        find output/ -type f | wc -l

    - name: Upload conversion artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jsx-conversion-output
        path: output/
        retention-days: 7
        include-hidden-files: true

  deploy-template:
    runs-on: ubuntu-latest
    needs: [sync-upstream, convert-jsx]
    if: needs.convert-jsx.outputs.conversion_success == 'true'

    steps:
    - name: Checkout development repository
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download conversion artifacts
      uses: actions/download-artifact@v4
      with:
        name: jsx-conversion-output
        path: output/

    - name: Debug downloaded artifacts
      run: |
        echo "üìã Listing downloaded artifacts:"
        ls -la output/
        echo "üìã Checking for .env.example:"
        ls -la output/.env.example || echo "‚ùå .env.example not found"
        echo "üìã Checking for .github directory:"
        ls -la output/.github/ || echo "‚ùå .github directory not found"
        echo "üìã Total downloaded files:"
        find output/ -type f | wc -l
        
        # Remove any workflow files from output to prevent permission issues
        if [ -d "output/.github/workflows" ]; then
          echo "‚ö†Ô∏è  Removing workflow files from output to prevent permission issues"
          rm -rf output/.github/workflows
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Configure Git for deployment
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Clone template repository
      env:
        TEMPLATE_TOKEN: ${{ secrets.TEMPLATE_REPO_TOKEN }}
      run: |
        echo "üì• Cloning template repository..."
        if [ -z "$TEMPLATE_TOKEN" ]; then
          echo "‚ùå TEMPLATE_REPO_TOKEN secret not found"
          echo "Please add a Personal Access Token with repo permissions as TEMPLATE_REPO_TOKEN secret"
          exit 1
        fi
        git clone https://x-access-token:$TEMPLATE_TOKEN@github.com/${{ env.TEMPLATE_REPO }}.git template-repo
        cd template-repo
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Deploy to template repository
      run: |
        echo "üöÄ Deploying to template repository..."

        cd template-repo

        # Remove all files except .git and .github/workflows
        find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name '.github' -exec rm -rf {} +

        # Copy all files from output
        cp -r ../output/* .

        # Copy hidden files explicitly (excluding .github)
        find ../output -name ".*" -type f ! -path "*/.github/*" -exec cp {} . \; 2>/dev/null || true
        
        # Ensure no workflow files are copied
        if [ -d ".github/workflows" ]; then
          echo "‚ö†Ô∏è  Removing any copied workflow files to avoid permission issues"
          rm -rf .github/workflows/*
        fi

        # Verify files were copied
        echo "üìã Verifying copied files:"
        ls -la
        echo "üìã Checking for .env.example:"
        ls -la .env.example || echo "‚ùå .env.example not found after copy"
        echo "üìã Checking for .github directory:"
        ls -la .github/ || echo "‚ùå .github directory not found after copy"

        # Add all changes
        git add .

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è  No changes to deploy"
          exit 0
        fi

        # Create commit message
        COMMIT_MSG="Auto Deploy JSX template"
        if [ "${{ needs.sync-upstream.outputs.commit_sha }}" != "" ]; then
          COMMIT_MSG="$COMMIT_MSG (${{ needs.sync-upstream.outputs.commit_sha }})"
        fi

        # Commit and push
        git commit -m "$COMMIT_MSG"
        git push origin main

        echo "‚úÖ Successfully deployed to template repository"

    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Successfully deployed JSX template" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Repository**: \`${{ env.UPSTREAM_REPO }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Development Repository**: \`${{ env.DEV_REPO }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Template Repository**: \`${{ env.TEMPLATE_REPO }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.sync-upstream.outputs.commit_sha }}" != "" ]; then
          echo "- **Source Commit**: \`${{ needs.sync-upstream.outputs.commit_sha }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Conversion Statistics" >> $GITHUB_STEP_SUMMARY
        JSX_COUNT=$(find output/resources/js -name "*.jsx" -o -name "*.js" 2>/dev/null | wc -l || echo "0")
        echo "- **Converted Files**: $JSX_COUNT JavaScript/JSX files" >> $GITHUB_STEP_SUMMARY
        echo "- **Template Updated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  notify-completion:
    runs-on: ubuntu-latest
    needs: [sync-upstream, convert-jsx, deploy-template]
    if: always()

    steps:
    - name: Workflow completion status
      run: |
        echo "## üìã Workflow Completion Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.sync-upstream.result }}" == "success" ]; then
          echo "- ‚úÖ **Upstream Sync**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå **Upstream Sync**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.convert-jsx.result }}" == "success" ]; then
          echo "- ‚úÖ **JSX Conversion**: Success" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.convert-jsx.result }}" == "skipped" ]; then
          echo "- ‚è≠Ô∏è **JSX Conversion**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå **JSX Conversion**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.deploy-template.result }}" == "success" ]; then
          echo "- ‚úÖ **Template Deployment**: Success" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-template.result }}" == "skipped" ]; then
          echo "- ‚è≠Ô∏è **Template Deployment**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ‚ùå **Template Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow completed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
